import 'dart:io';
import 'package:divmeds/core/api/api.url.dart';
import 'package:divmeds/designs/app_colors.dart';
import 'package:divmeds/features/auth/repositories/auth_repo.dart';
import 'package:divmeds/features/auth/repositories/user_repo.dart';
import 'package:divmeds/features/connections/ui/connection_screen.dart';
import 'package:divmeds/features/navigationbar/bottomnavigationbar/features/explore/components/input_button.dart';
import 'package:divmeds/features/navigationbar/bottomnavigationbar/features/home/models/dummy_post_models.dart';
import 'package:divmeds/features/navigationbar/bottomnavigationbar/features/profile/profile%20owner/owner%20self%20profile/components/edit_profile_picture.dart';
import 'package:divmeds/features/navigationbar/bottomnavigationbar/features/profile/profile%20owner/owner%20self%20profile/ui/sections/edit_user_profile.dart';

import 'package:divmeds/features/navigationbar/bottomnavigationbar/features/profile/profile%20owner/owner%20self%20profile/ui/settings_page.dart';
import 'package:flip_card/flip_card.dart';
import 'package:flutter/material.dart';

class ProfileSectionUserOwnDummy extends StatefulWidget {
  const ProfileSectionUserOwnDummy({super.key});

  @override
  State<ProfileSectionUserOwnDummy> createState() => _ProfileSectionUserOwnDummyState();
}

class _ProfileSectionUserOwnDummyState extends State<ProfileSectionUserOwnDummy> {
  AuthRepository authRepository = AuthRepository(serverUrl: "");
  UserRepository userRepository = UserRepository(serverUrl: ""); // Initialize your user repository
  String token = ""; // Add your token logic

  // Hardcoded user profile data
  final user = DummyUser(
    name: "Sahasrayan",
    profilePicture: "https://picsum.photos/150",
    education: [
      Education(
        degree: "BTech CSE",
        currentYear: "4th",
        institution: "University of Engineering & Management, Jaipur",
        startYear: 2018,
        endYear: 2024,
      ),
    ],
    connections: ["conn1", "conn2", "conn3"],
  );

  final List<DummyPost> dummyPosts = [
    DummyPost(
      username: 'doctor_jane',
      profileImageUrl: 'https://via.placeholder.com/150',
      content: [],
      caption: 'This is a text-only post with no media.',
      comments: ['Great post!', 'Very informative.', 'Thanks for sharing!'],
    ),
    // Add more DummyPosts as needed
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.divMedsColorBlueScaffoldAccent,
      appBar: AppBar(
        title: Padding(
          padding: EdgeInsets.symmetric(horizontal: 10),
          child: Text(
            user.name,
            style: TextStyle(
              color: Colors.black,
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
        centerTitle: false,
        backgroundColor: AppColors.divMedsColorBlueScaffoldAccent,
        actions: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 10),
            child: IconButton(
              icon: const Icon(Icons.settings),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => SettingsPage(authRepository: authRepository, token: token, userRepository: userRepository,),
                  ),
                );
              },
            ),
          ),
        ],
      ),
      body: DefaultTabController(
        length: 2,
        child: NestedScrollView(
          headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {
            return [
              _buildProfileHeader(user),
              _buildTabBar(),
            ];
          },
          body: TabBarView(
            children: [
              _buildPostsGrid(dummyPosts),
              _buildDiscussions(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildProfileHeader(DummyUser user) {
    return SliverToBoxAdapter(
      child: Center(
        child: FlipCard(
          direction: FlipDirection.HORIZONTAL,
          front: _buildProfileFront(user),
          back: _buildProfileBack(user),
        ),
      ),
    );
  }

  Widget _buildProfileFront(DummyUser user) {
    return Card(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10.0)),
      color: Colors.white,
      elevation: 5,
      child: Stack(
        children: [
          Container(
            width: 350,
            height: 350,
            padding: EdgeInsets.all(20),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Center(
                  child: Stack(
                    children: [
                      CircleAvatar(
                        radius: 60,
                        backgroundImage: NetworkImage(
                          user.profilePicture.isNotEmpty
                              ? user.profilePicture
                              : 'https://via.placeholder.com/150', // Default profile picture
                        ),
                      ),
                      Positioned(
                        right: 0,
                        bottom: 0,
                        child: InkWell(
                          onTap: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) => EditProfilePicture(
                                  onUpdateProfilePicture: (imageUrl) {
                                    setState(() {
                                      user.profilePicture = imageUrl;
                                    });
                                  },
                                  userRepository: userRepository,
                                  token: token,
                                ),
                              ),
                            );
                          },
                          child: CircleAvatar(
                            radius: 15,
                            backgroundColor: Colors.blue,
                            child: Icon(
                              Icons.edit,
                              color: Colors.white,
                              size: 15,
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 10),
                Center(
                  child: Text(
                    user.name,
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
                SizedBox(height: 10),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    Text(
                      user.education[0].degree,
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    Text(
                      '${user.education[0].currentYear} Year',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    Column(
                      children: [
                        InkWell(
                          onTap: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) => ConnectionListScreen(serverUrl: '', token: '', loggedInUserId: '',userId: '',),
                              ),
                            );
                          },
                          child: Text(
                            '${user.connections.length}',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                      ],
                    ),
                    Column(
                      children: [
                        InkWell(
                          onTap: () {
                            // Add functionality if needed
                          },
                          child: Text(
                            '0',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ),
          Positioned(
            right: 10,
            bottom: 10,
            child: IconButton(
              icon: Icon(Icons.edit),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => EditProfilePage(
                      userId: "Sahasrayan",
                      token: Config.token,
                      serverUrl: Config.serverUrl,
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProfileBack(DummyUser user) {
    return Card(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10.0)),
      color: AppColors.divMedsColorWhite,
      elevation: 5,
      child: Stack(
        children: [
          Container(
            width: 350,
            height: 350,
            padding: EdgeInsets.all(20),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Center(
                  child: CircleAvatar(
                    radius: 60,
                    backgroundImage: NetworkImage(user.profilePicture),
                  ),
                ),
                SizedBox(height: 10),
                Center(
                  child: Text(
                    user.name,
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
                SizedBox(height: 20),
                RichText(
                  text: TextSpan(
                    text: user.education[0].institution,
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.w500,
                      color: Colors.black,
                    ),
                  ),
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    Text(
                      '${user.education[0].startYear}',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    Text(
                      '${user.education[0].endYear}',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          Positioned(
            right: 10,
            bottom: 10,
            child: IconButton(
              icon: Icon(Icons.edit),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => EditProfilePicture(
                      onUpdateProfilePicture: (imageUrl) {
                        setState(() {
                          user.profilePicture = imageUrl;
                        });
                      },
                      userRepository: userRepository,
                      token: token,
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTabBar() {
    return SliverPersistentHeader(
      delegate: _SliverAppBarDelegate(
        TabBar(
          labelColor: Colors.black,
          unselectedLabelColor: Colors.grey,
          tabs: [
            Tab(text: 'Posts'),
            Tab(text: 'Discussions'),
          ],
        ),
      ),
      pinned: true,
    );
  }

  Widget _buildPostsGrid(List<DummyPost> posts) {
    return GridView.builder(
      padding: EdgeInsets.all(4.0),
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 3,
        mainAxisSpacing: 4.0,
        crossAxisSpacing: 4.0,
      ),
      itemCount: posts.length,
      itemBuilder: (context, index) {
        final post = posts[index];
        return GestureDetector(
          onTap: () {
            // Navigator.push(
            //   context,
            //   MaterialPageRoute(
            //     builder: (context) => SinglePostViewer(post: post),
            //   ),
            // );
          },
          child: Stack(
            children: [
              Container(
                color: Colors.white,
                child: post.content.isNotEmpty
                    ? _buildMediaPreview(post.content.first.url)
                    : _buildTextPreview(post.caption),
              ),
              if (post.content.length > 1)
                Positioned(
                  right: 4,
                  top: 4,
                  child: Icon(Icons.collections, color: Colors.white),
                ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildDiscussions() {
    return ListView.builder(
      itemCount: 1,
      itemBuilder: (context, index) {
        return Container(
          padding: EdgeInsets.all(16.0),
          margin: EdgeInsets.all(16.0),
          decoration: BoxDecoration(
            color: AppColors.divMedsColorBlueScaffoldAccent,
            borderRadius: BorderRadius.circular(16.0),
            boxShadow: [
              BoxShadow(
                color: Colors.grey.withOpacity(0.5),
                spreadRadius: 5,
                blurRadius: 7,
                offset: Offset(0, 3),
              ),
            ],
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Icon(
                Icons.info_outline,
                color: AppColors.divMedsColorBabyBlue,
                size: 48.0,
              ),
              SizedBox(height: 16.0),
              Text(
                'Feature Unavailable',
                style: TextStyle(
                  fontSize: 24.0,
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                ),
              ),
              SizedBox(height: 16.0),
              Text(
                'As DivMeds is in the MVP stage, this feature is currently not available. Help us in reaching more healthcare peers to make DivMeds even better!',
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: 16.0,
                  color: Colors.black87,
                ),
              ),
              SizedBox(height: 16.0),
              InputButtonWithShareIcon(
                onPressed: () {
                  print("Hi");
                },
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildMediaPreview(String url) {
    return url.endsWith('.mp4')
        ? Center(
            child: Icon(Icons.play_circle_filled, size: 50, color: Colors.black),
          )
        : Image.network(
            url,
            fit: BoxFit.cover,
          );
  }

  Widget _buildTextPreview(String caption) {
    return Center(
      child: Text(
        caption,
        style: TextStyle(fontSize: 16, color: Colors.black),
        textAlign: TextAlign.center,
      ),
    );
  }
}

class DummyUser {
  final String name;
  String profilePicture;
  final List<Education> education;
  final List<String> connections;

  DummyUser({
    required this.name,
    required this.profilePicture,
    required this.education,
    required this.connections,
  });
}

class Education {
  final String degree;
  final String currentYear;
  final String institution;
  final int startYear;
  final int endYear;

  Education({
    required this.degree,
    required this.currentYear,
    required this.institution,
    required this.startYear,
    required this.endYear,
  });
}

class DummyPost {
  final String username;
  final String profileImageUrl;
  final List<PostContent> content;
  final String caption;
  final List<String> comments;

  DummyPost({
    required this.username,
    required this.profileImageUrl,
    required this.content,
    required this.caption,
    required this.comments,
  });
}

class PostContent {
  final String type;
  final String url;

  PostContent._(this.type, this.url);

  factory PostContent.image(String url) => PostContent._('image', url);

  factory PostContent.video(String url) => PostContent._('video', url);
}

class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {
  final TabBar _tabBar;

  _SliverAppBarDelegate(this._tabBar);

  @override
  double get minExtent => _tabBar.preferredSize.height;

  @override
  double get maxExtent => _tabBar.preferredSize.height;

  @override
  Widget build(BuildContext context, double shrinkOffset, bool overlapsContent) {
    return Container(
      color: Colors.white,
      child: _tabBar,
    );
  }

  @override
  bool shouldRebuild(covariant SliverPersistentHeaderDelegate oldDelegate) {
    return false;
  }
}
